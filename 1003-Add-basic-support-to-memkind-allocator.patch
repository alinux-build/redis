From 4e9999d85bfc2e405d5e9bceea3c39ca6f3a0224 Mon Sep 17 00:00:00 2001
From: michalbiesek <michal.biesek@intel.com>
Date: Thu, 9 Apr 2020 11:50:46 +0200
Subject: [PATCH 03/16] Add basic support to memkind allocator

- compile against libmemkind: make MALLOC=memkind

Co-authored-by: jschmieg <jakub.schmiegel@intel.com>
[ caspar: add -lnuma in FINAL_LIBS if using memkind as default allocator. ]
Signed-off-by: Caspar Zhang <caspar@linux.alibaba.com>
---
 README.md     |  4 ++++
 src/Makefile  |  9 +++++++++
 src/zmalloc.c | 10 ++++++++++
 src/zmalloc.h |  6 ++++++
 4 files changed, 29 insertions(+)

diff --git a/README.md b/README.md
index c4519a7f3..9aaa229c2 100644
--- a/README.md
+++ b/README.md
@@ -71,6 +71,10 @@ To compile against jemalloc on Mac OS X systems, use:
 
     % make MALLOC=jemalloc
 
+To compile against memkind, use:
+
+    % make MALLOC=memkind
+
 Verbose build
 -------------
 
diff --git a/src/Makefile b/src/Makefile
index 535701b18..fe84dce48 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -70,6 +70,10 @@ ifeq ($(USE_JEMALLOC),no)
 	MALLOC=libc
 endif
 
+ifeq ($(USE_MEMKIND),yes)
+	MALLOC=memkind
+endif
+
 # Override default settings if possible
 -include .make-settings
 
@@ -197,6 +201,11 @@ ifeq ($(BUILD_TLS),yes)
     FINAL_LIBS += ../deps/hiredis/libhiredis_ssl.a -lssl -lcrypto
 endif
 
+ifeq ($(MALLOC),memkind)
+	FINAL_CFLAGS+= -DUSE_MEMKIND
+	FINAL_LIBS+= -lmemkind -ldaxctl -lnuma
+endif
+
 REDIS_CC=$(QUIET_CC)$(CC) $(FINAL_CFLAGS)
 REDIS_LD=$(QUIET_LINK)$(CC) $(FINAL_LDFLAGS)
 REDIS_INSTALL=$(QUIET_INSTALL)$(INSTALL)
diff --git a/src/zmalloc.c b/src/zmalloc.c
index 81e53ab8f..20f65c2eb 100644
--- a/src/zmalloc.c
+++ b/src/zmalloc.c
@@ -70,6 +70,12 @@ void zlibc_free(void *ptr) {
 #define free(ptr) je_free(ptr)
 #define mallocx(size,flags) je_mallocx(size,flags)
 #define dallocx(ptr,flags) je_dallocx(ptr,flags)
+#elif defined(USE_MEMKIND)
+#include <errno.h>
+#define malloc(size) memkind_malloc(MEMKIND_DEFAULT,size)
+#define calloc(count,size) memkind_calloc(MEMKIND_DEFAULT,count,size)
+#define realloc(ptr,size) memkind_realloc(MEMKIND_DEFAULT,ptr,size)
+#define free(ptr) memkind_free(MEMKIND_DEFAULT,ptr)
 #endif
 
 #define update_zmalloc_stat_alloc(__n) do { \
@@ -100,7 +106,11 @@ static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;
 void *zmalloc(size_t size) {
     void *ptr = malloc(size+PREFIX_SIZE);
 
+#ifdef USE_MEMKIND
+    if (!ptr && errno==ENOMEM) zmalloc_oom_handler(size);
+#else
     if (!ptr) zmalloc_oom_handler(size);
+#endif
 #ifdef HAVE_MALLOC_SIZE
     update_zmalloc_stat_alloc(zmalloc_size(ptr));
     return ptr;
diff --git a/src/zmalloc.h b/src/zmalloc.h
index 5ddb22337..458d73744 100644
--- a/src/zmalloc.h
+++ b/src/zmalloc.h
@@ -55,6 +55,12 @@
 #error "Newer version of jemalloc required"
 #endif
 
+#elif defined(USE_MEMKIND)
+#define ZMALLOC_LIB "memkind"
+#include <memkind.h>
+#define HAVE_MALLOC_SIZE 1
+#define zmalloc_size(p) memkind_malloc_usable_size(NULL, p)
+
 #elif defined(__APPLE__)
 #include <malloc/malloc.h>
 #define HAVE_MALLOC_SIZE 1
-- 
2.19.1.6.gb485710b

