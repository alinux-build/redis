From 3dd11f401c8a094b8e48197a8df02352e8079cde Mon Sep 17 00:00:00 2001
From: michalbiesek <michal.biesek@intel.com>
Date: Mon, 20 Apr 2020 13:17:35 +0200
Subject: [PATCH 15/23] Extend configuration parameters

- maximum value of dynamic threshold parameter defined in bytes
- memory ratio check period how often DRAM/PMEM ratio will be checked

Co-authored-by: jschmieg <jakub.schmiegel@intel.com>
---
 redis.conf                   |  9 ++++++++-
 src/config.c                 | 20 ++++++++++++++++----
 src/server.h                 |  3 +++
 tests/unit/introspection.tcl |  2 ++
 4 files changed, 29 insertions(+), 5 deletions(-)

diff --git a/redis.conf b/redis.conf
index 1e3e739db..e083dee8d 100644
--- a/redis.conf
+++ b/redis.conf
@@ -1857,7 +1857,8 @@ static-threshold 64
 # of internal dynamic threshold and dram-pmem-ratio. Application frequently compares DRAM
 # and Persistent Memory utilization and modifies value of internal dynamic threshold by
 # increasing or decreasing it to achieve expected dram-pmem-ratio. Internal dynamic threshold
-# have have minimum possible limit defined by dynamic-threshold-min.
+# have minimum possible limit defined by dynamic-threshold-min and maximum possible limit
+# defined by dynamic-threshold-max
 
 # The syntax of dram-pmem-ratio directive is the following:
 #
@@ -1875,3 +1876,9 @@ initial-dynamic-threshold 64
 
 # Minimum value of dynamic threshold
 dynamic-threshold-min 24
+
+# Maximum value of dynamic threshold
+dynamic-threshold-max 10000
+
+# DRAM/PMEM ratio period measured in miliseconds
+memory-ratio-check-period 100
diff --git a/src/config.c b/src/config.c
index 1afd0402b..46b0a2b62 100644
--- a/src/config.c
+++ b/src/config.c
@@ -389,6 +389,7 @@ void loadServerConfigFromString(char *config) {
                 }
                 server.dram_pmem_ratio.dram_val = dram;
                 server.dram_pmem_ratio.pmem_val = pmem;
+                server.target_pmem_dram_ratio = (double)pmem/dram;
         } else if (!strcasecmp(argv[0],"dir") && argc == 2) {
             if (chdir(argv[1]) == -1) {
                 serverLog(LL_WARNING,"Can't chdir to '%s': %s",
@@ -534,10 +535,19 @@ void loadServerConfigFromString(char *config) {
         goto loaderr;
     }
 
-    if (server.dram_pmem_ratio.pmem_val == 0 && server.dram_pmem_ratio.dram_val == 0 &&
-        server.memory_alloc_policy == MEM_POLICY_RATIO) {
-        err = "dram-pmem-ratio must be defined for ratio memory allocation policy";
-        goto loaderr;
+    if (server.memory_alloc_policy == MEM_POLICY_RATIO) {
+        if (server.dynamic_threshold_min > server.initial_dynamic_threshold) {
+            err = "dynamic threshold: initial value must be greater than or equal to minimum value for ratio memory allocation policy";
+            goto loaderr;
+        }
+        if (server.dynamic_threshold_max < server.initial_dynamic_threshold) {
+            err = "dynamic threshold: initial value must be less than or equal to maximum value for ratio memory allocation policy";
+            goto loaderr;
+        }
+        if (server.dram_pmem_ratio.pmem_val == 0 && server.dram_pmem_ratio.dram_val == 0) {
+            err = "dram-pmem-ratio must be defined for ratio memory allocation policy";
+            goto loaderr;
+        }
     }
 
     sdsfreesplitres(lines,totlines);
@@ -2218,11 +2228,13 @@ standardConfig configs[] = {
     createIntConfig("hz", NULL, MODIFIABLE_CONFIG, 0, INT_MAX, server.config_hz, CONFIG_DEFAULT_HZ, INTEGER_CONFIG, NULL, updateHZ),
     createIntConfig("min-replicas-to-write", "min-slaves-to-write", MODIFIABLE_CONFIG, 0, INT_MAX, server.repl_min_slaves_to_write, 0, INTEGER_CONFIG, NULL, updateGoodSlaves),
     createIntConfig("min-replicas-max-lag", "min-slaves-max-lag", MODIFIABLE_CONFIG, 0, INT_MAX, server.repl_min_slaves_max_lag, 10, INTEGER_CONFIG, NULL, updateGoodSlaves),
+    createIntConfig("memory-ratio-check-period", NULL, IMMUTABLE_CONFIG, 1, INT_MAX, server.ratio_check_period, 100, INTEGER_CONFIG, NULL, NULL),
 
     /* Unsigned int configs */
     createUIntConfig("maxclients", NULL, MODIFIABLE_CONFIG, 1, UINT_MAX, server.maxclients, 10000, INTEGER_CONFIG, NULL, updateMaxclients),
     createUIntConfig("initial-dynamic-threshold", NULL, IMMUTABLE_CONFIG, 0, UINT_MAX, server.initial_dynamic_threshold, 64, INTEGER_CONFIG, NULL, NULL),
     createUIntConfig("dynamic-threshold-min", NULL, IMMUTABLE_CONFIG, 0, UINT_MAX, server.dynamic_threshold_min, 24, INTEGER_CONFIG, NULL, NULL),
+    createUIntConfig("dynamic-threshold-max", NULL, IMMUTABLE_CONFIG, 0, UINT_MAX, server.dynamic_threshold_max, 10000, INTEGER_CONFIG, NULL, NULL),
     createUIntConfig("static-threshold", NULL, MODIFIABLE_CONFIG, 0, UINT_MAX, server.static_threshold, 64, INTEGER_CONFIG, NULL, updateStaticthreshold),
 
     /* Unsigned Long configs */
diff --git a/src/server.h b/src/server.h
index 2d39c1772..f6ab8fe34 100644
--- a/src/server.h
+++ b/src/server.h
@@ -1344,7 +1344,10 @@ struct redisServer {
     unsigned int static_threshold;            /* Persistent Memory static threshold */
     unsigned int initial_dynamic_threshold;   /* Persistent Memory initial dynamic threshold */
     unsigned int dynamic_threshold_min;       /* Minimum value of dynamic threshold */
+    unsigned int dynamic_threshold_max;       /* Maximum value of dynamic threshold */
     ratioDramPmemConfig dram_pmem_ratio;      /* DRAM/Persistent Memory ratio */
+    double target_pmem_dram_ratio;            /* Target PMEM/DRAM ratio */
+    int ratio_check_period;                   /* Period of checking ratio in Cron*/
     /* Blocked clients */
     unsigned int blocked_clients;   /* # of clients executing a blocking cmd.*/
     unsigned int blocked_clients_by_type[BLOCKED_NUM];
diff --git a/tests/unit/introspection.tcl b/tests/unit/introspection.tcl
index c874498d8..cd20e7b8c 100644
--- a/tests/unit/introspection.tcl
+++ b/tests/unit/introspection.tcl
@@ -102,6 +102,8 @@ start_server {tags {"introspection"}} {
             memory-alloc-policy
             initial-dynamic-threshold
             dynamic-threshold-min
+            dynamic-threshold-max
+            memory-ratio-check-period
         }
 
         set configs {}
-- 
2.19.1.6.gb485710b

