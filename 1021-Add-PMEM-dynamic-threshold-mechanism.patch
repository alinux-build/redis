From e14cca8f53890ddc8eb33cd044c5136890bb44a3 Mon Sep 17 00:00:00 2001
From: jschmieg <jakub.schmiegel@intel.com>
Date: Tue, 19 May 2020 15:55:01 +0200
Subject: [PATCH 21/23] Add PMEM dynamic threshold mechanism

- Monitors DRAM/PMEM proportion and adjust internal threshold to keep target ratio
- Additonally check trend of ratio change and distance to target ratio
---
 src/pmem.c   | 52 ++++++++++++++++++++++++++++++++++++++++++++++++++--
 src/server.c |  3 +++
 src/server.h |  1 +
 3 files changed, 54 insertions(+), 2 deletions(-)

diff --git a/src/pmem.c b/src/pmem.c
index b01259d60..0d8982863 100644
--- a/src/pmem.c
+++ b/src/pmem.c
@@ -29,9 +29,20 @@
  */
 #include "server.h"
 
+#include <math.h>
+#include <stdio.h>
+
+#define THRESHOLD_STEP_NORMAL 0.05
+#define THRESHOLD_STEP_AGGRESIVE (THRESHOLD_STEP_NORMAL*5)
+#define THRESHOLD_UP(val, step)  ((size_t)ceil((1+(step))*val))
+#define THRESHOLD_DOWN(val, step) ((size_t)floor((1-(step))*val))
+
+static inline size_t absDiff(size_t a, size_t b) {
+    return a > b ? (a - b) : (b - a);
+}
+
 /* Initialize the pmem threshold. */
-void pmemThresholdInit(void)
-{
+void pmemThresholdInit(void) {
     switch(server.memory_alloc_policy) {
         case MEM_POLICY_ONLY_DRAM:
             zmalloc_set_threshold(UINT_MAX);
@@ -49,3 +60,40 @@ void pmemThresholdInit(void)
             serverAssert(NULL);
     }
 }
+
+void adjustPmemThresholdCycle(void) {
+    if (server.memory_alloc_policy == MEM_POLICY_RATIO) {
+        run_with_period(server.ratio_check_period) {
+            /* Difference between target ratio and current ratio in last checkpoint*/
+            static double ratio_diff_checkpoint;
+            /* PMEM and DRAM utilization in last checkpoint*/
+            static size_t total_memory_checkpoint;
+            size_t pmem_memory = zmalloc_used_pmem_memory();
+            size_t dram_memory = zmalloc_used_memory();
+            size_t total_memory_current = pmem_memory + dram_memory;
+            // do not modify threshold when change in memory usage is too small
+            if (absDiff(total_memory_checkpoint, total_memory_current) > 100) {
+                double current_ratio = (double)pmem_memory/dram_memory;
+                double current_ratio_diff = fabs(current_ratio - server.target_pmem_dram_ratio);
+                if (current_ratio_diff > 0.02) {
+                    //current ratio is worse than moment before
+                    double variableMultipler = current_ratio/server.target_pmem_dram_ratio;
+                    double step = (current_ratio_diff < ratio_diff_checkpoint) ?
+                                  variableMultipler*THRESHOLD_STEP_NORMAL : variableMultipler*THRESHOLD_STEP_AGGRESIVE;
+                    size_t threshold = zmalloc_get_threshold();
+                    if (server.target_pmem_dram_ratio < current_ratio) {
+                        size_t higher_threshold = THRESHOLD_UP(threshold,step);
+                        if (higher_threshold <= server.dynamic_threshold_max)
+                            zmalloc_set_threshold(higher_threshold);
+                    } else {
+                        size_t lower_threshold = THRESHOLD_DOWN(threshold,step);
+                        if (lower_threshold >= server.dynamic_threshold_min)
+                            zmalloc_set_threshold(lower_threshold);
+                    }
+                }
+                ratio_diff_checkpoint = current_ratio_diff;
+            }
+            total_memory_checkpoint = total_memory_current;
+        }
+    }
+}
diff --git a/src/server.c b/src/server.c
index f03660a3f..e6f2e71cd 100644
--- a/src/server.c
+++ b/src/server.c
@@ -1697,6 +1697,9 @@ void databasesCron(void) {
         }
     }
 
+    /* Adjust PMEM threshold. */
+    adjustPmemThresholdCycle();
+
     /* Defrag keys gradually. */
     activeDefragCycle();
 
diff --git a/src/server.h b/src/server.h
index 4a6559902..7f2972fce 100644
--- a/src/server.h
+++ b/src/server.h
@@ -2216,6 +2216,7 @@ void dictSdsDestructor(void *privdata, void *val);
 
 /* pmem.c - Handling Persistent Memory */
 void pmemThresholdInit(void);
+void adjustPmemThresholdCycle(void);
 
 /* Git SHA1 */
 char *redisGitSHA1(void);
-- 
2.19.1.6.gb485710b

